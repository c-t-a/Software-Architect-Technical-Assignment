@page "/"

@inject IDatabaseRepository repositroy
@inject IInvoiceRepository repository

@inject IWebHostEnvironment env

@using System.Text.RegularExpressions
@using CsvHelper;
@using System.IO
@using System.Xml.Serialization

<div class="d-flex align-items-center my-5">
    <button class="btn btn-lg btn-primary"
            @onclick="@CreateDatabase">Create Databse
    </button>
</div>
<div class="d-flex align-items-center justify-content-center">
    <div class="w-100 h-100">
        <div>
            <div class="d-flex align-items-center">
                <InputFile OnChange="HandleSelection"
                           accept=".csv,.xml" />
                @{
                    if (isLoading == true)
                    {
                        <div class=" row">
                            <div class="col-auto">
                                <div class="spinner-border text-primary"></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-auto">
                                <button type="submit" class="btn btn-primary" @onclick="@UploadInvoice" disabled="@noUpload">Submit</button>
                            </div>
                        </div>
                    }


}
            </div>
            @{
                if (!string.IsNullOrEmpty(errorMessage)) { 
                        <div>
                            <p class="mt-4 text-danger">@errorMessage</p>
                        </div>
                }
            }
        </div>
    </div>
</div>


@code {
    private bool isLoading { get; set; } = false;
    private bool noUpload { get; set; } = true;
    public static string errorMessage = string.Empty;
    public string Message { get; set; }

    public async Task CreateDatabase()
    {
        errorMessage = string.Empty;
        try
        {
            await repositroy.Create("invoice");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private IBrowserFile selectedFile { get; set; }
    private Stream stream { get; set; }
    private string filePath { get; set; }
    private FileStream fileStream { get; set; }

    private long maxFileSize = 1048576; // set max file upload size in bytes
    private long TotalBytes;
    private long UploadedBytes;

    private Regex regexCSV = new Regex(".+\\.csv", RegexOptions.Compiled); // check file is CSV
    private Regex regexXML = new Regex(".+\\.xml", RegexOptions.Compiled); // check file is XML

    public List<Invoice> invoiceList { get; set; }

    protected async Task HandleSelection(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty;
        if (e.File.Size <= maxFileSize) // check file size is less than 1MB
        {
            if (!regexCSV.IsMatch(e.File.Name) && !regexXML.IsMatch(e.File.Name)) // check file type is csv or xml with Regular Expression
            {
                errorMessage = "Please choose the correct file!";
            }
            else
            {
                isLoading = true;
                filePath = $"{env.WebRootPath}\\{e.File.Name}";
                Invoice.fileName = e.File.Name;
                Invoice.filePath = env.WebRootPath;
                selectedFile = e.File;

                UploadedBytes = 0;

                // Disable the file input field
                //UploadingLargeFile = true;
                await InvokeAsync(StateHasChanged);

                // calculate the chunks we have to send
                TotalBytes = selectedFile.Size;
                long percent = 0;
                long chunkSize = 400000; // fairly arbitrary
                long numChunks = TotalBytes / chunkSize;
                long remainder = TotalBytes % chunkSize;

                // get new filename with a bit of entropy

                if (File.Exists(filePath)) // delete the file if already exist
                {
                    File.Delete(filePath);
                }

                // Open the input and output file streams
                using (var inStream = selectedFile.OpenReadStream(long.MaxValue))
                {
                    using (var outStream = File.OpenWrite(filePath))
                    {
                        System.Threading.Thread.Sleep(3000);
                        // Read and Write

                        for (int i = 0; i < numChunks; i++)
                        {
                            // Read the next chunk
                            var buffer = new byte[chunkSize];
                            await inStream.ReadAsync(buffer, 0, buffer.Length);
                            // Write it
                            await outStream.WriteAsync(buffer, 0, buffer.Length);
                            // Update our progress data and UI
                            UploadedBytes += chunkSize;
                            percent = UploadedBytes * 100 / TotalBytes;
                            // Report progress with a string
                            //LargeUploadMessage = $"Uploading {args.File.Name} {percent}%";
                            await InvokeAsync(StateHasChanged);
                        }

                        if (remainder > 0)
                        {
                            // Same stuff as above, just with the leftover chunk data
                            var buffer = new byte[remainder];
                            System.Threading.Thread.Sleep(500);
                            await inStream.ReadAsync(buffer, 0, buffer.Length);
                            System.Threading.Thread.Sleep(500);
                            await outStream.WriteAsync(buffer, 0, buffer.Length);
                            UploadedBytes += remainder;
                            percent = UploadedBytes * 100 / TotalBytes;
                            //LargeUploadMessage = $"Uploading {args.File.Name} {percent}%";
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                }
                isLoading = false;
                noUpload = false;
            }
        }
        else
        {
            errorMessage = "Please upload the file which is less than 1MB!";
        }
    }

    #region Upload Invoice Function
    public async Task UploadInvoice()
    {
        errorMessage = string.Empty;

        if (regexCSV.IsMatch(selectedFile.Name))
        {
            await ReadCSV();
        }
        else
        {
            await ReadXML();
        }

        if (File.Exists(filePath)) // delete the file after upload
        {
            File.Delete(filePath);
        }
        filePath = string.Empty;
        noUpload = false;
    }
    #region CSV Read Function
    private async Task ReadCSV()
    {
        try
        {
            using (var reader = new StreamReader(filePath))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                //csv.Context.RegisterClassMap<Raw>();
                invoiceList = csv.GetRecords<Invoice>().ToList();
                reader.Close();
            }

            await repository.UploadInvoices(invoiceList);
            invoiceList.Clear();
        }
        catch (Exception e)
        {
            errorMessage = $"Invalid file! {e}";
        }
    }
    #endregion
    #region XML Read Function
    private async Task ReadXML()
    {
        ForXml data = new ForXml();

        var XmlSerializer = new XmlSerializer(typeof(ForXml));

        try
        {
            var reader = new StreamReader(filePath);
            data = (ForXml)XmlSerializer.Deserialize(reader);

            invoiceList = new List<Invoice>();

            foreach (var i in data.Transcations)
            {
                Invoice invoice = new Invoice
                {
                    TransactionID = i.ID,
                    Amount = i.PaymentDetails.Amount,
                    CurrencyCode = i.PaymentDetails.CurrencyCode,
                    TransactionDate = i.TransactionDate,
                    Status = i.Status
                };
                invoiceList.Add(invoice);
            }
            reader.Close();
            await repository.UploadInvoices(invoiceList);
            invoiceList.Clear();
        }
        catch (Exception e)
        {
            errorMessage = $"Invalid file! {e}";
        }
    }
    #endregion
    #endregion
}